{-# OPTIONS --sized-types #-}

open import FRP.JS.Array using ( ⟨⟩ ; ⟨_ ; _,_ ; _⟩ )
open import FRP.JS.Bool using ( Bool ; true ; false ; not )
open import FRP.JS.JSON using ( JSON ; float ; bool ; string ; object ; array ; null ; parse ; _==_ )
open import FRP.JS.Maybe using ( Maybe ; just ; nothing ; _==[_]_ )
open import FRP.JS.Object using ( ⟪_ ; _↦_⟫ ; _↦_,_ ) 
open import FRP.JS.QUnit using ( TestSuite ; test ; ok ; ok! ; _,_ )

module FRP.JS.Test.JSON where

⟨1⟩       = array (⟨ float 1.0 ⟩)
⟨n⟩       = array (⟨ null ⟩)
⟨1,n⟩     = array (⟨ float 1.0 , null ⟩)
⟨n,1⟩     = array (⟨ null , float 1.0 ⟩)
⟨⟨1⟩⟩     = array (⟨ ⟨1⟩ ⟩)
⟪a↦1⟫     = object (⟪ "a" ↦ float 1.0 ⟫)
⟪b↦n⟫     = object (⟪ "b" ↦ null ⟫)
⟪a↦1,b↦n⟫ = object (⟪ "a" ↦ float 1.0 , "b" ↦ null ⟫)
⟪a↦⟪a↦1⟫⟫ = object (⟪ "a" ↦ ⟪a↦1⟫ ⟫)
⟪a↦⟨1⟩⟫   = object (⟪ "a" ↦ ⟨1⟩ ⟫)
⟨⟪a↦1⟫⟩   = array (⟨ ⟪a↦1⟫ ⟩)

_==?_ : Maybe JSON → Maybe JSON → Bool
j ==? k = j ==[ _==_ ] k

tests : TestSuite
tests =
  ( test "=="
    ( ok "n == n" (null == null) 
    , ok "a == a" (string "a" == string "a")
    , ok "t == t" (bool true == bool true)
    , ok "f == f" (bool false == bool false)
    , ok "1 == 1" (float 1.0 == float 1.0)
    , ok "2 == 2" (float 2.0 == float 2.0)
    , ok "⟨1⟩ == ⟨1⟩" (⟨1⟩ == ⟨1⟩)
    , ok "⟨n⟩ == ⟨n⟩" (⟨n⟩ == ⟨n⟩)
    , ok "⟨1,n⟩ == ⟨1,n⟩" (⟨1,n⟩ == ⟨1,n⟩)
    , ok "⟪a↦1⟫ == ⟪a↦1⟫" (⟪a↦1⟫ == ⟪a↦1⟫)
    , ok "⟪b↦n⟫ == ⟪b↦n⟫" (⟪b↦n⟫ == ⟪b↦n⟫)
    , ok "⟪a↦1,b↦n⟫ == ⟪a↦1,b↦n⟫" (⟪a↦1,b↦n⟫ == ⟪a↦1,b↦n⟫)
    , ok "⟪a↦⟪a↦1⟫⟫ == ⟪a↦⟪a↦1⟫⟫" (⟪a↦⟪a↦1⟫⟫ == ⟪a↦⟪a↦1⟫⟫)
    , ok "⟪a↦⟨1⟩⟫ == ⟪a↦⟨1⟩⟫" (⟪a↦⟨1⟩⟫ == ⟪a↦⟨1⟩⟫)
    , ok "⟨⟪a↦1⟫⟩ == ⟨⟪a↦1⟫⟩" (⟨⟪a↦1⟫⟩ == ⟨⟪a↦1⟫⟩)
    , ok "n == a" (not (null == string "a")) 
    , ok "n == 'n'" (not (null == string "null")) 
    , ok "n == f" (not (null == bool false)) 
    , ok "n == 0" (not (null == float 0.0)) 
    , ok "a == b" (not (string "a" == string "b"))
    , ok "a == A" (not (string "a" == string "A"))
    , ok "t == 't'" (not (string "true" == bool true))
    , ok "1 == '1'" (not (string "1.0" == float 1.0))
    , ok "t == f" (not (bool true == bool false))
    , ok "f == 0" (not (bool false == float 0.0))
    , ok "1 == 2" (not (float 1.0 == float 2.0))
    , ok "⟨1⟩ == ⟨n⟩" (not (⟨1⟩ == ⟨n⟩))
    , ok "⟨1⟩ == ⟨1,n⟩" (not (⟨1⟩ == ⟨1,n⟩))
    , ok "⟨1,n⟩ == ⟨n,1⟩" (not (⟨1,n⟩ == ⟨n,1⟩))
    , ok "⟪a↦1⟫ == ⟪b↦n⟫" (not (⟪a↦1⟫ == ⟪b↦n⟫))
    , ok "⟪a↦1⟫ == ⟪a↦1,b↦n⟫" (not (⟪a↦1⟫ == ⟪a↦1,b↦n⟫))
    , ok "⟪a↦⟪a↦1⟫⟫ == ⟪a↦1⟫" (not (⟪a↦⟪a↦1⟫⟫ == ⟪a↦1⟫))
    , ok "⟪a↦⟨1⟩⟫ == ⟪a↦1⟫" (not (⟪a↦⟨1⟩⟫ == ⟪a↦1⟫))
    , ok "⟨⟪a↦1⟫⟩ == ⟪a↦1⟫" (not (⟨⟪a↦1⟫⟩ == ⟪a↦1⟫)) ) 
  , test "parse"
    ( ok! "parse n" (parse "null" ==? just null)
    , ok! "parse a" (parse "\"a\"" ==? just (string "a"))
    , ok! "parse a" (parse "true" ==? just (bool true))
    , ok! "parse a" (parse "false" ==? just (bool false))
    , ok! "parse a" (parse "1" ==? just (float 1.0))
    , ok! "parse a" (parse "1.0" ==? just (float 1.0))
    , ok! "parse ⟨1⟩" (parse "[1]" ==? just ⟨1⟩)
    , ok! "parse ⟨n⟩" (parse "[null]" ==? just ⟨n⟩)
    , ok! "parse ⟨1,n⟩" (parse "[1,null]" ==? just ⟨1,n⟩)
    , ok! "parse ⟨n,1⟩" (parse "[null,1]" ==? just ⟨n,1⟩)
    , ok! "parse ⟨⟨1⟩⟩" (parse "[[1]]" ==? just ⟨⟨1⟩⟩)
    , ok! "parse ⟪a↦1⟫" (parse "{\"a\":1}" ==? just ⟪a↦1⟫)
    , ok! "parse ⟪b↦n⟫" (parse "{\"b\":null}" ==? just ⟪b↦n⟫)
    , ok! "parse ⟪a↦1,b↦n⟫" (parse "{\"a\":1,\"b\":null}" ==? just ⟪a↦1,b↦n⟫)
    , ok! "parse ⟪a↦⟪a↦1⟫⟫" (parse "{\"a\":{\"a\":1}}" ==? just ⟪a↦⟪a↦1⟫⟫)
    , ok! "parse ⟪a↦⟨1⟩⟫" (parse "{\"a\":[1]}" ==? just ⟪a↦⟨1⟩⟫)
    , ok! "parse ⟨⟪a↦1⟫⟩" (parse "[{\"a\":1}]" ==? just ⟨⟪a↦1⟫⟩)
    , ok! "parse ⟨⟪a↦1⟫⟩" (parse "][" ==? nothing ) ) )